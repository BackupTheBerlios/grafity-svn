#!/usr/bin/python
from __future__ import division

import sys, os
import os.path
from optparse import OptionParser

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-d', '--setdatadir', dest='datadir', help='Set grafit data directory')
    parser.add_option('-u', '--update', action='store_true', dest='update', help='Update grafit to latest version')
    options, args = parser.parse_args()
    if options.datadir is not None:
        open(options.datadir+'/program/location.py', 'w').write("DATADIR='%s/'\n" % 
                                                                    os.path.abspath(options.datadir))
        print 'Grafit data directory set to ' + os.path.abspath(options.datadir)
        sys.exit(0)

    DATADIR = os.path.normpath( os.path.dirname( os.path.realpath(
#              os.path.abspath(sys.modules[__name__].__file__)))+'/../')+'/'
              os.path.abspath(__file__)))+'/../')+'/'

    sys.path.append(DATADIR)

#    try:
#        l = os.popen('cd '+DATADIR+' && svn status -u').readlines()[-1].split()[-1]
#        LATESTREVISION=l.strip()
#    except:
    LATESTREVISION='XXX'
#
#
#    try:
#        l = max([int(l.split()[0]) for l in os.popen('cd '+DATADIR+' && svn status -v').readlines() if l.startswith(' ')])
#        REVISION=str(l)
#    except:
    REVISION='XXX'

    if options.update:
        p = os.popen('cd '+DATADIR+' && svn info')
        for line in p.readlines():
            if line.startswith('URL'):
                print line,
        p = os.popen('cd '+DATADIR+' && svn up')
        print p.read(),
        sys.exit(0)



from qt import *

class GrafitSplash(QSplashScreen):
    def __init__(self, pixmap):
        QSplashScreen.__init__(self, pixmap)

    def drawContents(self, painter):
        QSplashScreen.drawContents(self, painter)
        font = painter.font()
        font.setPointSize(11)
        text = 'r'+REVISION
        painter.drawText(418, 100, text, len(text))

if __name__ == '__main__':
    app = QApplication(sys.argv)
 
    splash = GrafitSplash(QPixmap(DATADIR + 'pixmaps/logo.png'))
    splash.show()

def splash_message(text):
    if __name__ == '__main__':
        splash.message (text, Qt.AlignLeft, Qt.gray)
    pass

import time
import traceback

    
from grafit.worksheet import Worksheet
from grafit.graph import Graph
from grafit.script import Console

from grafit.project import project
from grafit.main import MainWindow

from scipy import *


project.revision = REVISION
project.latestrevision = LATESTREVISION
project.datadir = DATADIR

IconFileProject = QPixmap(project.datadir + 'pixmaps/graphite-file.png')

class IconProvider(QFileIconProvider):
    """
    Class providing icons to QFileDialog.
    """
    def __init__(self):
        QFileIconProvider.__init__(self)

    def pixmap(self,finfo):
        if str(finfo.extension()) in ['gft']:
            pm = IconFileProject
        else:
            pm = None

        return pm

IconProviderInst = IconProvider()
QFileDialog.setIconProvider(IconProviderInst)

class exception_form(QDialog):
    def __init__(self,parent = None,name = None,modal = 0,fl = 0):
        QDialog.__init__(self,parent,name,modal,fl)

        if not name:
            self.setName("exception_form")

        self.setSizePolicy(QSizePolicy(0,0,0,0,self.sizePolicy().hasHeightForWidth()))
        self.setSizeGripEnabled(1)

        exception_formLayout = QVBoxLayout(self,1,6,"exception_formLayout")
        exception_formLayout.setResizeMode(QLayout.Minimum)

        layout2 = QHBoxLayout(None,0,6,"layout2")

        self.pixmap = QLabel(self,"pixmap")
        self.pixmap.setSizePolicy(QSizePolicy(0,0,0,0,self.pixmap.sizePolicy().hasHeightForWidth()))
        self.pixmap.setScaledContents(1)
        layout2.addWidget(self.pixmap)

        self.label = QLabel(self,"label")
        self.label.setMinimumSize(QSize(380,0))
        layout2.addWidget(self.label)
        exception_formLayout.addLayout(layout2)

        layout2_2 = QHBoxLayout(None,0,6,"layout2_2")
        spacer2 = QSpacerItem(181,31,QSizePolicy.Expanding,QSizePolicy.Minimum)
        layout2_2.addItem(spacer2)

        self.closebtn = QPushButton(self,"closebtn")
        layout2_2.addWidget(self.closebtn)
        exception_formLayout.addLayout(layout2_2)

        self.languageChange()

        self.resize(QSize(391,58).expandedTo(self.minimumSizeHint()))
        self.clearWState(Qt.WState_Polished)

        self.connect(self.closebtn,SIGNAL("clicked()"),self,SLOT("close()"))


    def languageChange(self):
        self.setCaption(self.__tr("Den Vogel"))
        self.label.setText(QString.null)
        self.closebtn.setText(self.__tr("OK!"))


    def __tr(self,s,c = None):
        return qApp.translate("exception_form",s,c)


class ErrorWindow(exception_form):
    def __init__(self, type, value, tback):
        exception_form.__init__(self, mainwin, 'error', True)
        self.label.setText("An error <b>(%s)</b> has occurred.<br><i>%s</i><br>This should not happen, please tell Daniel!" % (type, value))
        self.pixmap.setPixmap(QPixmap(project.datadir + 'pixmaps/vogel.png'))
        lines = ''.join(traceback.format_exception (type, value, tback))
        f = file('.grafit-birds', 'a')
        f.write('# bird at %s\n' % time.strftime("%d %b %Y %H:%M:%S"))
        f.write(lines)
        f.write('\n\n')
       
def excepthook(type, value, traceback):
#    if type is OverflowError:
#        print >>sys.stderr, 'OverflowError'
#        return
    ErrorWindow(type, value, traceback).exec_loop()
    sys.__excepthook__(type, value, traceback)

    
def main ():
    sys.excepthook = excepthook

    global mainwin
    mainwin = MainWindow ()
    mainwin.setIcon (QPixmap(project.datadir + 'pixmaps/icon.png'))

    scriptnames = [fn[0:-3] for fn in os.listdir(project.datadir+'/scripts/') if fn.endswith ('.py')]
    for name in scriptnames:
        module = __import__('scripts/' + name)

    splash.finish (mainwin)
    app.setMainWidget(mainwin)
    mainwin.show()
    if len(args) >= 1:
        project.load(args[0])

    app.exec_loop()

if __name__ == '__main__':
    main ()
