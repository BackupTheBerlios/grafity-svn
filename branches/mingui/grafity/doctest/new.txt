The ``grafit.worksheet`` module
================================

Using ``Worksheet``
-------------------

This is an example text file in reStructuredText format.  First import
``factorial`` from the ``example`` module:

    >>> from grafit import Project, Worksheet, Folder
    >>> from grafit.commands import undo, redo
    >>> p = Project()

Now use it:

    >>> w = p.new(Worksheet, 'data1')
    >>> p.remove(w.id)
    >>> w = p.new(Worksheet, 'data2')
    >>> w.add_column('A')
    >>> w.add_column('B')
    >>> print w.column_names
    ['A', 'B']
    >>> undo()
    >>> print w.column_names
    ['A']
    >>> redo()
    >>> print w.column_names
    ['A', 'B']



You can remove columns with remove(), like this:

    >>> w.remove_column('A')
    >>> print w.column_names
    ['B']
    >>> undo()
    >>> print w.column_names
    ['A', 'B']
    >>> w.remove_column('C')
    Traceback (most recent call last):
    ...
    NameError: Worksheet does not have a column named C

    >>> w['B'] = [1,2,3,4] 
    >>> w['B']
    array([ 1.,  2.,  3.,  4.])
    >>> #w['B'] + 1
    >>> import os
    >>> #os.remove('rikadik.db')


How it works: Internals (subject to change!)
--------------------------------------------

When an object is removed from the project, it is not deleted,
but it is only removed from project._objects. and marked as deleted
with data.id = '-'+data.id. When the action list is cleared, it cleans up
all deleted objects.

Items are created in two ways:

* By the project, when loading the database
    
    This should call Item.__init__(self, name, folder, ..., location)

    This is not subject to undo, since it does not change the project. No actions are registered.

* By the user, when adding a new object to the project

    This should create a row in the database, and call 
