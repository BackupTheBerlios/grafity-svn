grafity.core.storage
====================

# defining a database
# data types
# reading/writing stuff
# saving/loading
# undo/redo
# notification and validation
# defining new data types


Using ``factorial``
-------------------

This is an example text file in reStructuredText format.  First import
``factorial`` from the ``example`` module:

    >>> from grafity.base.squirrel import Storage, Container, Item, Attr

You define new classes derived from Item, like this

    >>> class Person(Item):
    ...     firstname = Attr.Text()
    ...     lastname = Attr.Text()
    ...     def _validate__firstname(self, name):
    ...         return name.lower()
    ...
    >>> class Album(Item):
    ...     artist = Attr.ObjectRef()
    ...     name = Attr.Text()

You define the database like this

    >>> class MusicDB(Storage):
    ...     people = Container(Person)
    ...     albums = Container(Album)
    ...


Create a store

    >>> st = MusicDB('foo.db')
    >>> isinstance(st, Storage)
    True

Create new objects

    >>> st.begin('foobar')
    >>> try:
    ...     p = st.people.create()
    ...     p.firstname = 'John'
    ... finally:
    ...     st.commit()
    >>> st.undo()
    >>> len(st.people)
    0
    >>> st.redo()
    >>> len(st.people)
    1
    >>> st.people[0].firstname
    'john'
    >>> st.undo()
    >>> len(st.people)
    0
